---
interface Props {
	functionType: string;
}

const functionType = Astro.props.functionType;
---

<div id={`astro-data-${functionType}`} data-functiontype={functionType}></div>
<div class="flex select-none flex-col items-center justify-center space-y-2">
	<div
		class="flex items-center justify-center space-x-2 rounded-xl bg-black/10 p-6 font-mono text-2xl backdrop-blur-sm xxs:text-4xl md:text-6xl xl:text-8xl"
	>
		<div class="time-unit-container">
			<input
				id=`hours-${functionType}`
				type="number"
				value="00"
				data-unit="hours"
				data-function-type={functionType}
				class="draggable-input cursor-ns-resize rounded-md bg-black bg-opacity-0 text-white placeholder-white placeholder-opacity-50 outline-none transition-all hover:bg-opacity-25"
			/>
		</div>
		<span class="text-gray-300">:</span>
		<div class="time-unit-container">
			<input
				id=`minutes-${functionType}`
				type="number"
				value="00"
				data-unit="minutes"
				data-function-type={functionType}
				class="draggable-input cursor-ns-resize rounded-md bg-black bg-opacity-0 text-white placeholder-white placeholder-opacity-50 outline-none transition-all hover:bg-opacity-25"
			/>
		</div>
		<span class="text-gray-300">:</span>
		<div class="time-unit-container">
			<input
				id=`seconds-${functionType}`
				type="number"
				value="00"
				data-unit="seconds"
				data-function-type={functionType}
				class="draggable-input cursor-ns-resize rounded-md bg-black bg-opacity-0 text-white placeholder-white placeholder-opacity-50 outline-none transition-all hover:bg-opacity-25"
			/>
		</div>
		<span class="text-gray-300">.</span>
		<div class="time-unit-container">
			<input
				id=`milliseconds-${functionType}`
				type="number"
				value="00"
				data-unit="milliseconds"
				data-function-type={functionType}
				class="draggable-input cursor-ns-resize rounded-md bg-black bg-opacity-0 text-white placeholder-white placeholder-opacity-50 outline-none transition-all hover:bg-opacity-25"
			/>
		</div>
	</div>
	
</div>

<style>
	.time-unit-container {
		position: relative;
	}

	.time-unit {
		padding: 0.5rem;
		border-radius: 0.25rem;
		transition: background-color 0.2s;
	}

	.time-unit:hover {
		background-color: rgba(0, 0, 0, 0.1);
	}

	.time-unit:focus {
		background-color: rgba(0, 0, 0, 0.2);
		outline: none;
	}

	/* Hide spinner buttons in Chrome, Safari, Edge, and Opera */
	input[type="number"]::-webkit-outer-spin-button,
	input[type="number"]::-webkit-inner-spin-button {
		-webkit-appearance: none;
		margin: 0;
	}

	/* Hide spinner buttons in Firefox */
	input[type="number"] {
		-moz-appearance: textfield;
	}

	/* Optional: Set padding and width to remove extra space */
	input[type="number"] {
		width: 2ch; /* Set width to fit two characters */
	}
</style>

<script define:vars={{ functionType }}>
	let editTimeTimeout;

	class TimeManager {
		constructor(functionType) {
			this.functionType = functionType;
			this.isDragging = false;
			this.lastY = 0;
			this.editingEvent = null;

			// Initialize DOM elements with proper typing
			this.inputs = document.querySelectorAll(
				`input[data-function-type="${this.functionType}"]`
			);

			this.init();
		}

		init() {
			// Page format: #<page>/<hours>_<minutes>_<seconds>_<milliseconds>
			const stringTime = window.location.hash.split("/")[1];
			const type = window.location.hash.split("/")[0].slice(1);
			let time = ["00", "00", "00", "00"];

			if (stringTime && type === this.functionType)
				time = stringTime.split("_");

			// Add event listeners
			this.inputs.forEach((input, index) => {
				input.addEventListener("input", () => this.formatInput(input));
				input.value = time[index];
			});

			document.addEventListener(`selectFunction-${this.functionType}`, () => {
				this.sendTime();
			});

			// Dragging functionality
			document.addEventListener("mousedown", (e) => this.handleStart(e));
			document.addEventListener("mousemove", (e) => this.handleMove(e));
			document.addEventListener("mouseup", () => this.handleEnd());

			document.addEventListener("touchstart", (e) => this.handleStart(e));
			document.addEventListener("touchmove", (e) => this.handleMove(e), { passive: false });
			document.addEventListener("touchend", () => this.handleEnd());
		}

		sendTime() {
			const time = {
				hours: this.getInputValue("hours"),
				minutes: this.getInputValue("minutes"),
				seconds: this.getInputValue("seconds"),
				milliseconds: this.getInputValue("milliseconds"),
			};

			const editTime = new CustomEvent("editTime", {
				detail: { type: this.functionType, time: time },
				bubbles: true,
			});
			document.dispatchEvent(editTime);
		}

		updateData() {
			const time = {
				hours: this.getInputValue("hours"),
				minutes: this.getInputValue("minutes"),
				seconds: this.getInputValue("seconds"),
				milliseconds: this.getInputValue("milliseconds"),
			};

			const updateFunctionData = new CustomEvent(
				`updateFunctionData-${this.functionType}`,
				{
					detail: { time: time },
					bubbles: true,
				}
			);
			document.dispatchEvent(updateFunctionData);
		}

		formatInput(input) {
			// prevent decimals
			let value = Math.round(Number(input.value)).toString();
			const unit = input.dataset.unit;

			if (value.length === 1) {
				value = `0${value}`;
			}

			if (value.length > 2) {
				value = value.slice(-2);
			}

			switch (unit) {
				case "hours":
					if (parseInt(value) > 99) value = "00";
					else if (parseInt(value) < 0) value = "99";
					break;
				case "minutes":
				case "seconds":
					if (parseInt(value) > 59) value = "00";
					else if (parseInt(value) < 0) value = "59";
					break;
				case "milliseconds":
					if (parseInt(value) > 99) value = "00";
					else if (parseInt(value) < 0) value = "99";
					break;
			}

			input.value = value;

			this.updateData();

			clearTimeout(editTimeTimeout);
			editTimeTimeout = setTimeout(() => {
				this.sendTime();
			}, 300);
		}

		

		getInputValue(unit) {
			const input = document.querySelector(
				`input[data-unit="${unit}"][data-function-type="${this.functionType}"]`
			);
			return input?.value ?? "00";
		}

		handleStart(event) {
			const target = event.target;
			if (
				!target.dataset.functionType ||
				target.dataset.functionType !== this.functionType
			)
				return;
			if (!target.classList.contains("draggable-input")) return;

			this.isDragging = true;
			this.lastY =
				event instanceof MouseEvent
					? event.clientY
					: event.touches[0].clientY;
			this.editingEvent = event;
		}

		handleMove(event) {
			if (!this.isDragging || !this.editingEvent) return;

			event.preventDefault();

			const input = this.editingEvent.target;
			const value = Number(input.value);
			const currentY =
				event instanceof MouseEvent
					? event.clientY
					: event.touches[0].clientY;
			const deltaY = Math.round(this.lastY - currentY);

			input.value = (value + deltaY).toString();
			this.lastY = currentY;
			this.formatInput(input);
		}

		handleEnd() {
			this.isDragging = false;
			this.editingEvent = null;
		}
	}

	// Initialize all time managers
	new TimeManager(functionType);
</script>
