---
import Layout from "../layouts/Layout.astro";

import Chronometer from "../components/functions/Chronometer.astro";
import Countdown from "../components/functions/Countdown.astro";
import IntervalTimer from "../components/functions/IntervalTimer.astro";

---

<Layout title="Chrono app">
	<main class="h-full">
		<div id="countdown-container">
			<Countdown />
		</div>
		<div id="chronometer-container" style="display: none;">
			<Chronometer />
		</div>
		<div id="interval-timer-container" style="display: none;">
			<IntervalTimer />
		</div>
	</main>
</Layout>

<script>
	interface PageSelectEvent extends CustomEvent {
		detail: {
			page: string;
		};
	}

	interface PageTimeEvent extends CustomEvent {
		detail: {
			type: string;
			time: {
				hours: string;
				minutes: string;
				seconds: string;
				milliseconds: string;
			};
		};
	}

	// Object mapping pages to their container IDs
	const pageContainers = {
		countdown: "countdown-container",
		chronometer: "chronometer-container",
		"interval-timer": "interval-timer-container",
	};

	function setHash(newHash) {
		if (window.location.hash !== newHash) {
			window.location.hash = newHash;
		}
	}

	// Function to show selected page and hide others
	function showPage(selectedPage: string) {
		Object.entries(pageContainers).forEach(([page, containerId]) => {
			const container = document.getElementById(containerId);
			if (container) {
				container.style.display =
					page === selectedPage ? "block" : "none";
			}
		});
	}

	function editTime({
		type,
		time: { hours, minutes, seconds, milliseconds },
	}: PageTimeEvent["detail"]) {
		// Get current page (just the hash #<page>)
		const page = type;
		const time = `${hours}_${minutes}_${seconds}_${milliseconds}`;

		setHash(`${page}/${time}`);
	}

	// Listen for page selection event
	document.addEventListener("onSelect", ((e: PageSelectEvent) => {
		showPage(e.detail.page);
	}) as EventListener);

	// Page format: #<page>/<hours>_<minutes>_<seconds>_<milliseconds>
	// listen for page time editing event
	document.addEventListener("onTimeEdit", ((e: PageTimeEvent) => {
		editTime(e.detail);
	}) as EventListener);

	let wakeLock = null;
	document.addEventListener("wakeLock", async () => {
		try {
			wakeLock = await navigator.wakeLock.request("screen");
		} catch (err) {
			console.error(
				`Error activando el Wake Lock: ${err.name}, ${err.message}`
			);
		}
	});

	document.addEventListener("wakeLockRelease", async () => {
		if (wakeLock !== null) {
			await wakeLock.release();
			wakeLock = null;
		}
	});

	let defaultTime = {
		hours: "00",
		minutes: "00",
		seconds: "00",
		milliseconds: "00",
	};

	function updateTimeFromHash() {
		const [hash, time] = window.location.hash.slice(1).split("/");

		// Si no hay tiempo o el tiempo no est치 en el formato correcto, establecer a "00:00:00:00"
		function isValidTime(time) {
			const timeArray = time ? time.split("_") : [];
			const twoDigitPattern = /^\d{2}$/;
			return (
				timeArray.length === 4 &&
				timeArray.every(function (element) {
					return twoDigitPattern.test(element);
				})
			);
		}

		editTime({
			type: hash,
			time: isValidTime(time) ? parseTime(time) : defaultTime,
		});

		showPage(hash in pageContainers ? hash : "countdown");
		window.location.hash =
			hash in pageContainers
				? window.location.hash
				: "countdown/00_00_00_00";
	}

	// Funci칩n para convertir el tiempo de formato de cadena a objeto
	function parseTime(time) {
		const [hours, minutes, seconds, milliseconds] = time.split("_");
		return { hours, minutes, seconds, milliseconds };
	}

	// Llamar a la funci칩n al cargar la p치gina o cuando cambie el hash
	if (window.location.hash) {
		updateTimeFromHash();
	} else {
		window.location.hash = "countdown/00_00_00_00";
		showPage("countdown");
	}
</script>
